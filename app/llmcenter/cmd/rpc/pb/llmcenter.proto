// 指定使用 proto3 语法。
syntax = "proto3";

// 定义包名，这有助于防止不同 .proto 文件之间的命名冲突。
package llmcenter;

// 为生成的 Go 代码指定导入路径。
option go_package = "./pb";


// ===================================================================
//  Service: LlmCenter - 定义所有核心 RPC 方法
// ===================================================================

service LlmCenter {
  // RPC 方法: ChatCompletions
  // 对应 API: POST /llmcenter/v1/chat/completions
  // 功能: 发起新对话或在现有对话中发送消息，以流式方式返回响应。
  rpc ChatCompletions(ChatCompletionsRequest) returns (stream ChatCompletionsResponse);

  // RPC 方法: ChatResume
  // 对应 API: POST /llmcenter/v1/chat/resume
  // 功能: 在工作流中断后，继续生成内容，以流式方式返回最终文档。
  rpc ChatResume(ChatResumeRequest) returns (stream ChatResumeResponse);

  // RPC 方法: FileUpload
  // 对应 API: POST /llmcenter/v1/files/upload
  // 功能: 使用客户端流上传文件。客户端先发送文件元信息，然后分块发送文件数据。
  rpc FileUpload(stream FileUploadRequest) returns (FileUploadResponse);

  // RPC 方法: GetConversations
  // 对应 API: GET /llmcenter/v1/conversations
  // 功能: 获取当前用户的会话列表。
  rpc GetConversations(GetConversationsRequest) returns (GetConversationsResponse);

  // RPC 方法: GetConversationDetail
  // 对应 API: GET /llmcenter/v1/conversations/{conversation_id}
  // 功能: 获取指定会话的详细历史消息。
  rpc GetConversationDetail(GetConversationDetailRequest) returns (GetConversationDetailResponse);

  // RPC 方法: GetDocumentDetail
  // 对应 API: GET /llmcenter/v1/documents/{conversation_id}
  // 功能: 获取指定会话的最终文档历史记录。
  rpc GetDocumentDetail(GetDocumentDetailRequest) returns (GetDocumentDetailResponse);

  // RPC 方法: GetHistoryData
  // 对应 API: GET /llmcenter/v1/historydatas/{conversation_id}
  // 功能: 获取指定会话的历史数据
  rpc GetHistoryData(GetHistoryDataRequest) returns (GetHistoryDataResponse);

  // RPC 方法: EditDocumentRequest
  // 对应 API: POST /llmcenter/v1/chat/edit
  // 功能: 获取指定会话的历史数据
  rpc EditDocument(EditDocumentRequest) returns (stream EditDocumentResponse);

  // RPC 方法: UpdateDocumentRequest
  // 对应 API: POST /llmcenter/v1/chat/update
  // 功能: 手动修改文档内容
  rpc UpdateDocument(UpdateDocumentRequest) returns (UpdateDocumentResponse);

  // RPC 方法: DownloadFileRequest
  // 对应 API: POST /llmcenter/v1/file/download
  // 功能: 将Markdown转为相应格式并下载
  rpc ConvertMarkdown(ConvertMarkdownRequest) returns (ConvertMarkdownResponse);

  // RPC 方法: DownloadFileLinkRequest
  // 对应 API: POST /llmcenter/v1/file/downloadlink
  // 功能: 将Markdown转为相应格式并返回下载链接
  rpc ConvertMarkdownLink (ConvertMarkdownLinkRequest) returns (ConvertMarkdownLinkResponse);
}


// ===================================================================
//  Message Definitions: Chat & Conversation
// ===================================================================

// 请求: 发起新对话或继续对话
message ChatCompletionsRequest {
  int64 user_id = 6; //api层传来的用户id
  string conversation_id = 1;      // 可选: 现有会话ID。如果为空，将创建新会话。
  string documenttype = 2;         // 文章类型
  string information = 7;          // 基本信息
  string requests = 8;             // 特殊要求
  bool use_knowledge_base = 3;     // 可选: 是否使用自定义知识库。
  string knowledge_base_id = 4;    // 可选: 如果 use_knowledge_base 为 true，则需要提供知识库ID。
  repeated Reference references = 5; // 可选: 引用列表，例如引用的文件。
}

// 响应流: ChatCompletions 的流式响应体
// 使用 oneof 来模拟 SSE 中的不同 event 类型。
message ChatCompletionsResponse {
  oneof event {
    SSEMessageEvent message = 1;   // 对应 event: message
    SSEInterruptEvent interrupt = 2; // 对应 event: interrupt
    SSEEndEvent end = 3;             // 对应 event: end
  }
}

// 请求: 在中断后继续流程
message ChatResumeRequest {
  int64 user_id = 4;          //api层传来的用户id 
  string conversation_id = 1; // 必选: 当前会话的ID。
  string content = 2;         // 必选: 用户在前端编辑器中确认后的完整内容。
  string template_id = 3;     // 可选: 如果用户在这一步选择了模板。
  
  string documenttype = 5;              // 新增：续写的文档类型
  repeated Reference references = 6;    // 新增：附件引用（图片/文档）
}

// 响应流: ChatResume 的流式响应体
message ChatResumeResponse {
  oneof event {
    SSEMessageEvent message = 1; // 对应 event: message
    SSEEndEvent end = 2;         // 对应 event: end
  }
}

// 请求: 获取用户所有会话列表
// 通常 user_id 从 gRPC 的 metadata (类似 HTTP Header) 中获取，所以请求体为空。
message GetConversationsRequest {
  int64 user_id = 1; // 可以选择在这里传递 user_id
}

// 响应: 会话列表
message GetConversationsResponse {
  repeated Conversation data = 1;
}

// 请求: 获取单个会话的详细信息
message GetConversationDetailRequest {
  string conversation_id = 1; // 从路径中获取的会话ID
}

// 响应: 单个会话的详细信息
message GetConversationDetailResponse {
  string conversation_id = 1;
  string title = 2;
  repeated Message history = 3;
}

// 请求：获取单个最终文档的详细信息
message GetDocumentDetailRequest {
  string conversation_id = 1;
}

// 单个文档
message Document {
  string message_id = 1;
  string content = 2;
  string created_at = 3;
}

// 响应：单个最终文档的详细信息
message GetDocumentDetailResponse {
  string conversation_id = 1;
  repeated Document documents = 2;
}

// 请求: 获取单个会话的历史数据
message GetHistoryDataRequest {
  string conversation_id = 1;
}

// 响应: 历史数据列表
message GetHistoryDataResponse {
  string conversation_id = 1;
  repeated HistoryData items = 2;
}

// 单个历史数据项
message HistoryData {
  string message_id = 1;
  string documenttype = 2;
  string information = 3;
  string requests = 4;
  string created_at = 5;
  repeated FileReference references = 6;
}

//文件
message FileReference {
  string file_id = 1;
  string filename = 2;
  string function = 3;
}

message EditDocumentRequest {
  int64 user_id = 1;
  string conversation_id = 2;
  string message_id = 3;
  string prompt = 4;
  bool use_knowledge_base = 5;
  string knowledge_base_id = 6;
}

message EditDocumentResponse {
  oneof event {
    SSEMessageEvent message = 1;
    SSEEndEvent end = 2;
  }
}

message UpdateDocumentRequest {
  string conversation_id = 1;
  string message_id = 2;
  string prompt = 3;
}

message UpdateDocumentResponse {
  bool success = 1;
}

message ConvertMarkdownRequest {
  string markdown = 1;
  string type = 2; // "pdf" | "docx"
  repeated InfoItem information = 3; // 新：标题/文号等扩展字段
}

message ConvertMarkdownResponse {
  string filename = 1;
  string content_type = 2;
  bytes  data = 3;
}

message InfoItem {
  string type = 1;     // "title" | "docNo"（大小写不敏感）
  string contant = 2;  // 文本内容
}


// ===================================================================
//  Message Definitions: File Upload
// ===================================================================

// 请求流: 文件上传
// 客户端流的第一个消息必须是 FileInfo，后续消息为文件数据块。
message FileUploadRequest {
  oneof data {
    FileInfo info = 1; // 文件元信息
    bytes chunk = 2;   // 文件数据块
  }
}

// 消息: 文件元信息
message FileInfo {
  string file_name = 1; // 原始文件名
}

// 响应: 文件上传成功
message FileUploadResponse {
  string file_id = 1;   // 后端生成的唯一文件ID
  string file_name = 2; // 原始文件名
  string url = 3;       // 文件的可访问URL
  string message = 4;   // 成功消息
}


// ===================================================================
//  Common Data Structures (通用数据结构)
// ===================================================================

// 结构: 对话中引用的对象
message Reference {
  string type = 1;   // 引用类型, 例如: "file"
  string file_id = 2; // 文件ID
}

// 结构: 会话列表中的单个会话
message Conversation {
  string conversation_id = 1; // 会话ID
  string title = 2;           // 会话标题
  string updated_at = 3;      // 更新时间 (RFC3339 格式的字符串)
}

// 结构: 单条历史消息
message Message {
  string id = 1;            // 消息ID
  string role = 2;          // 角色: "user" 或 "assistant"
  string content = 3;       // 消息内容
  string content_type = 4;  // 内容类型, 例如: "text", "document_outline"
  string created_at = 5;    // 创建时间 (RFC3339 格式的字符串)
}


// ===================================================================
//  Server-Sent Events (SSE) Data Structures (流式事件数据结构)
// ===================================================================

// 事件: message
// 用于闲聊或最终文档生成的流式文本
message SSEMessageEvent {
  string chunk = 1; // 流式返回的文本片段
}

// 事件: interrupt
// 用于触发文档生成，返回内容清单
message SSEInterruptEvent {
  string conversation_id = 1;
  string message_id = 2;
  string content_type = 3; // 内容类型, 例如 "document_outline"
  string content = 4;      // 需要填入编辑器的内容清单
}

// 事件: end
// 表示一次完整的对话或流结束
message SSEEndEvent {
  string conversation_id = 1; // 本次交互所属的会话ID
  string message_id = 2;      // 本次交互最终生成的完整消息ID
}



// ===================================================================
//  工作流使用接口数据
// ===================================================================

message ConvertMarkdownLinkRequest {
  string type = 1;      // "pdf" | "docx"
  string markdown = 2;  // 原文
}

message ConvertMarkdownLinkResponse {
  string filename = 1;      // 例如 export.pdf
  string content_type = 2;  // application/pdf / ...
  string path = 3;          // 相对存储路径（如 exports/2025-08-12/xxxxxx.pdf）
  string url = 4;           // 可下载的完整 URL（Download.BaseURL + "?path=" + path）
}
